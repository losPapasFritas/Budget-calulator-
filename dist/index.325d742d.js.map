{"mappings":"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","sources":["<anon>","script.js"],"sourcesContent":["// npm run dev\nlet utils = {}; //create a namespace for our utility functions\n//get function to make an HTTP GET request\nutils.get = (url)=>{\n    //start promise object\n    return new Promise(function(resolve, reject) {\n        //create a new XMLHttpRequest object\n        let request = new XMLHttpRequest();\n        //initialize the request\n        request.open(\"GET\", url);\n        request.onload = function() {\n            //resolve on success\n            if (request.status == 200) {\n                console.log(\"Response OK\");\n                resolve(request.response);\n            } else reject(Error(`promise error with ${request.status}`));\n        };\n        //handle network errors\n        request.onerror = function(error) {\n            reject(Error(`Network Error with ${url}: ${error}`));\n        };\n        //send the request\n        request.send();\n    }); //end Promise Object\n};\n//getJSON function to get JSON data from the server\nutils.getJSON = async function(url) {\n    let string = null;\n    //get the JSON string from the server\n    try {\n        string = await utils.get(url);\n    } catch (error) {\n        console.log(error);\n    }\n    //parse the JSON string and return the data\n    let data = JSON.parse(string);\n    return data;\n};\nasync function init() {\n    //get the root element of the web page\n    let root = document.querySelector(\"#jobs\");\n    //create a variable to hold the URL of the JSON data source\n    let url = \"https://eecu-data-server.vercel.app/data/2024\";\n    //create a variable to hold the JSON data\n    let occupations = null;\n    //try to retrieve the JSON data from the server\n    try {\n        //retrieve the JSON data from the server\n        occupations = await utils.getJSON(url);\n    } //catch any errors and display them in the root element\n    catch (error) {\n        root.style.color = \"red\";\n        root.textContent = `error: ${error}`;\n    }\n    //show JSON data on the html page\n    root.innerHTML = buildList(occupations);\n}\nfunction buildList(jobs) {\n    //create an empty string to hold the HTML\n    let html = '<option value=\"0\">Custom</option>';\n    //loop through the array of job objects retrieved from the JSON data\n    for (let job of jobs)//start an HTML section for each job\n    /* An alternative way of looping through each item in the data, not as useful for this assignment but something to keep in mind for a story? ... */ //loop through each entry and create a div for each key:value pair\n    // for (let key in job) {\n    //     html += `<div><strong>${key}</strong>: ${job[key]}</div > `;\n    // }\n    html += `<option value=\" ${job.salary}\"> ${job.occupation}</option>`;\n    //return the completed html\n    return html;\n}\nfunction updateMoney(money) {\n    let fedTax = 0.12;\n    let stTax = 0.07;\n    let output = 0;\n    console.log(money);\n    document.getElementById(`salaryConst`).innerHTML = money;\n    fedTax = Math.ceil(money * fedTax);\n    document.getElementById(\"fedTax\").innerHTML = fedTax;\n    stTax = Math.ceil(money * stTax);\n    document.getElementById(\"stateTax\").innerHTML = stTax;\n    let socSec = Math.ceil(money * 0.062);\n    document.getElementById(\"socks\").innerHTML = socSec;\n    let medicare = Math.ceil(money * 0.0145);\n    document.getElementById(\"meds\").innerHTML = medicare;\n    let stDis = Math.ceil(money * 0.01);\n    document.getElementById(\"disable\").innerHTML = stDis;\n    let retInv = Math.ceil(money * 0.05);\n    document.getElementById(\"retire\").innerHTML = retInv;\n    output = fedTax + stTax + socSec + medicare + stDis + retInv + 180;\n    document.getElementById(\"money\").innerHTML = money - output;\n}\nfunction updateChart() {\n    chart.data.datasets[0].data[0] = parseFloat(document.getElementById(`loans`).value);\n    chart.data.datasets[0].data[1] = parseFloat(document.getElementById(`housing`).value);\n    chart.data.datasets[0].data[2] = parseFloat(document.getElementById(`utilities`).value);\n    chart.data.datasets[0].data[3] = parseFloat(document.getElementById(`transportation`).value);\n    chart.data.datasets[0].data[4] = parseFloat(document.getElementById(`food`).value);\n    chart.data.datasets[0].data[5] = parseFloat(document.getElementById(`clothing`).value);\n    chart.data.datasets[0].data[6] = parseFloat(document.getElementById(`media`).value);\n    chart.data.datasets[0].data[7] = parseFloat(document.getElementById(`entertainment`).value);\n    chart.data.datasets[0].data[8] = parseFloat(document.getElementById(`savings`).value);\n    chart.update();\n}\nfunction addRight() {\n    let loans = parseFloat(document.getElementById(`loans`).value);\n    let housing = parseFloat(document.getElementById(`housing`).value);\n    let util = parseFloat(document.getElementById(`utilities`).value);\n    let transport = parseFloat(document.getElementById(`transportation`).value);\n    let food = parseFloat(document.getElementById(`food`).value);\n    let clothes = parseFloat(document.getElementById(`clothing`).value);\n    let media = parseFloat(document.getElementById(`media`).value);\n    let entertain = parseFloat(document.getElementById(`entertainment`).value);\n    let savings = parseFloat(document.getElementById(`savings`).value);\n    let total = loans + housing + util + transport + food + clothes + media + entertain + savings;\n    document.getElementById(`total`).innerHTML = `$` + total;\n}\ndocument.addEventListener(\"DOMContentLoaded\", init);\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    document.getElementById(\"jobs\").addEventListener(\"change\", function(eventData) {\n        if (eventData.target.value == 0) {\n            document.getElementById(`monthSalary`).classList.remove(`hidden`);\n            document.getElementById(`salaryConst`).classList.remove(`visible`);\n            document.getElementById(`monthSalary`).classList.add(`visible`);\n            document.getElementById(`salaryConst`).classList.add(`hidden`);\n        } else {\n            document.getElementById(`monthSalary`).classList.remove(`visible`);\n            document.getElementById(`salaryConst`).classList.remove(`hidden`);\n            document.getElementById(`monthSalary`).classList.add(`hidden`);\n            document.getElementById(`salaryConst`).classList.add(`visible`);\n            updateMoney(eventData.target.value);\n        }\n    });\n    document.getElementById(\"monthSalary\").addEventListener(\"change\", function(eventData) {\n        if (document.getElementById(\"monthSalary\").value >= 100000000000) window.alert(`Input value is too large`);\n        else if (document.getElementById(\"monthSalary\").value < 0) window.alert(`Input value is too small`);\n        else updateMoney(document.getElementById(\"monthSalary\").value);\n    });\n    document.getElementById(`loans`).addEventListener(`change`, function() {\n        addRight();\n    });\n    document.getElementById(`housing`).addEventListener(`change`, function() {\n        addRight();\n    });\n    document.getElementById(`utilities`).addEventListener(`change`, function() {\n        addRight();\n    });\n    document.getElementById(`transportation`).addEventListener(`change`, function() {\n        addRight();\n    });\n    document.getElementById(`food`).addEventListener(`change`, function() {\n        addRight();\n    });\n    document.getElementById(`clothing`).addEventListener(`change`, function() {\n        addRight();\n    });\n    document.getElementById(`media`).addEventListener(`change`, function() {\n        addRight();\n    });\n    document.getElementById(`entertainment`).addEventListener(`change`, function() {\n        addRight();\n    });\n    document.getElementById(`savings`).addEventListener(`change`, function() {\n        addRight();\n    });\n});\ndocument.getElementById(`loans`).addEventListener(`change`, function() {\n    changeData();\n});\ndocument.getElementById(`housing`).addEventListener(`change`, function() {\n    changeData();\n});\ndocument.getElementById(`utilities`).addEventListener(`change`, function() {\n    changeData();\n});\ndocument.getElementById(`transportation`).addEventListener(`change`, function() {\n    changeData();\n});\ndocument.getElementById(`food`).addEventListener(`change`, function() {\n    changeData();\n});\ndocument.getElementById(`clothing`).addEventListener(`change`, function() {\n    changeData();\n});\ndocument.getElementById(`media`).addEventListener(`change`, function() {\n    changeData();\n});\ndocument.getElementById(`entertainment`).addEventListener(`change`, function() {\n    changeData();\n});\ndocument.getElementById(`savings`).addEventListener(`change`, function() {\n    changeData();\n});\n\n//# sourceMappingURL=index.325d742d.js.map\n","// npm run dev\r\nlet utils = {}; //create a namespace for our utility functions\r\n\r\n\r\n\r\n//get function to make an HTTP GET request\r\nutils.get = (url) => {\r\n\r\n    //start promise object\r\n    return new Promise(function (resolve, reject) {\r\n\r\n        //create a new XMLHttpRequest object\r\n        let request = new XMLHttpRequest();\r\n\r\n        //initialize the request\r\n        request.open('GET', url);\r\n\r\n        request.onload = function () {\r\n            //resolve on success\r\n            if (request.status == 200) { // HTTP: OK\r\n                console.log('Response OK');\r\n                resolve(request.response);\r\n            }\r\n            //reject on error\r\n            else {\r\n                reject(Error(`promise error with ${request.status}`))\r\n            }\r\n        };\r\n        //handle network errors\r\n        request.onerror = function (error) {\r\n            reject(Error(`Network Error with ${url}: ${error}`))\r\n        };\r\n        //send the request\r\n        request.send();\r\n    }); //end Promise Object\r\n}\r\n\r\n//getJSON function to get JSON data from the server\r\nutils.getJSON = async function (url) {\r\n    let string = null;\r\n    //get the JSON string from the server\r\n    try {\r\n        string = await utils.get(url);\r\n    }\r\n    catch (error) {\r\n        console.log(error)\r\n    }\r\n    //parse the JSON string and return the data\r\n    let data = JSON.parse(string);\r\n    return data;\r\n}\r\n\r\nasync function init() {\r\n    //get the root element of the web page\r\n    let root = document.querySelector('#jobs');\r\n\r\n    //create a variable to hold the URL of the JSON data source\r\n    let url = 'https://eecu-data-server.vercel.app/data/2024';\r\n\r\n    //create a variable to hold the JSON data\r\n    let occupations = null; \r\n    \r\n    //try to retrieve the JSON data from the server\r\n    try {\r\n        //retrieve the JSON data from the server\r\n        occupations = await utils.getJSON(url);\r\n    }\r\n    //catch any errors and display them in the root element\r\n    catch(error){\r\n        root.style.color = 'red';\r\n        root.textContent = `error: ${error}`;\r\n    }\r\n\r\n    //show JSON data on the html page\r\n    root.innerHTML = buildList(occupations);\r\n}\r\n\r\nfunction buildList(jobs) {\r\n    //create an empty string to hold the HTML\r\n    let html = '<option value=\"0\">Custom</option>';\r\n\r\n    //loop through the array of job objects retrieved from the JSON data\r\n    for (let job of jobs) {\r\n\r\n        //start an HTML section for each job\r\n        /* An alternative way of looping through each item in the data, not as useful for this assignment but something to keep in mind for a story? ... */\r\n        //loop through each entry and create a div for each key:value pair\r\n        // for (let key in job) {\r\n        //     html += `<div><strong>${key}</strong>: ${job[key]}</div > `;\r\n        // }\r\n        html += `<option value=\" ${job.salary}\"> ${job.occupation}</option>`\r\n        //create a div element for the job title\r\n       \r\n    }\r\n\r\n    //return the completed html\r\n    return html;\r\n}\r\n\r\nfunction updateMoney(money){\r\n    let fedTax = 0.12;\r\n\r\n    let stTax = 0.07;\r\n\r\n    let output = 0;\r\n\r\n    console.log(money);\r\n\r\n    document.getElementById(`salaryConst`).innerHTML = money\r\n\r\n    fedTax = Math.ceil(money * fedTax);\r\n    document.getElementById(\"fedTax\").innerHTML = fedTax;\r\n\r\n    stTax = Math.ceil(money * stTax)\r\n    document.getElementById(\"stateTax\").innerHTML = stTax;\r\n\r\n    let socSec = Math.ceil(money * 0.062);\r\n    document.getElementById(\"socks\").innerHTML = socSec;\r\n\r\n    let medicare = Math.ceil(money * 0.0145);\r\n    document.getElementById(\"meds\").innerHTML = medicare;\r\n\r\n    let stDis = Math.ceil(money * 0.01);\r\n    document.getElementById(\"disable\").innerHTML = stDis;\r\n\r\n    let retInv = Math.ceil(money * 0.05);\r\n    document.getElementById(\"retire\").innerHTML = retInv;\r\n\r\n    output = (fedTax + stTax + socSec + medicare + stDis + retInv) + 180;\r\n\r\n    document.getElementById(\"money\").innerHTML = money - output;\r\n}\r\n\r\nfunction updateChart(){\r\n    chart.data.datasets[0].data[0] = parseFloat(document.getElementById(`loans`).value);\r\n    chart.data.datasets[0].data[1] = parseFloat(document.getElementById(`housing`).value);\r\n    chart.data.datasets[0].data[2] = parseFloat(document.getElementById(`utilities`).value);\r\n    chart.data.datasets[0].data[3] = parseFloat(document.getElementById(`transportation`).value);\r\n    chart.data.datasets[0].data[4] = parseFloat(document.getElementById(`food`).value);\r\n    chart.data.datasets[0].data[5] = parseFloat(document.getElementById(`clothing`).value);\r\n    chart.data.datasets[0].data[6] = parseFloat(document.getElementById(`media`).value);\r\n    chart.data.datasets[0].data[7] = parseFloat(document.getElementById(`entertainment`).value);\r\n    chart.data.datasets[0].data[8] = parseFloat(document.getElementById(`savings`).value);\r\n    chart.update();\r\n}\r\n\r\nfunction addRight(){\r\n    let loans = parseFloat(document.getElementById(`loans`).value);\r\n    let housing = parseFloat(document.getElementById(`housing`).value);\r\n    let util = parseFloat(document.getElementById(`utilities`).value);\r\n    let transport = parseFloat(document.getElementById(`transportation`).value);\r\n    let food = parseFloat(document.getElementById(`food`).value);\r\n    let clothes = parseFloat(document.getElementById(`clothing`).value);\r\n    let media = parseFloat(document.getElementById(`media`).value);\r\n    let entertain = parseFloat(document.getElementById(`entertainment`).value);\r\n    let savings = parseFloat(document.getElementById(`savings`).value);\r\n    let total = loans + housing + util + transport + food + clothes + media + entertain + savings;\r\n    document.getElementById(`total`).innerHTML =`$` + total\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', init);\r\n    \r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n\r\n    document.getElementById('jobs').addEventListener('change', function (eventData) {\r\n        if(eventData.target.value == 0){\r\n            document.getElementById(`monthSalary`).classList.remove(`hidden`);\r\n            document.getElementById(`salaryConst`).classList.remove(`visible`);\r\n            document.getElementById(`monthSalary`).classList.add(`visible`);\r\n            document.getElementById(`salaryConst`).classList.add(`hidden`);\r\n        } else{\r\n            document.getElementById(`monthSalary`).classList.remove(`visible`);\r\n            document.getElementById(`salaryConst`).classList.remove(`hidden`);\r\n            document.getElementById(`monthSalary`).classList.add(`hidden`);\r\n            document.getElementById(`salaryConst`).classList.add(`visible`);\r\n\r\n            updateMoney(eventData.target.value);\r\n        }\r\n    })\r\n\r\n    document.getElementById('monthSalary').addEventListener('change', function (eventData) {\r\n        if(document.getElementById(\"monthSalary\").value >= 100000000000){\r\n            window.alert(`Input value is too large`);\r\n        }\r\n        else if(document.getElementById(\"monthSalary\").value < 0){\r\n            window.alert(`Input value is too small`);\r\n        }\r\n        else{\r\n            updateMoney(document.getElementById(\"monthSalary\").value);\r\n        }\r\n    });\r\n    document.getElementById(`loans`).addEventListener(`change`, function (){\r\n        addRight();\r\n    });\r\n    document.getElementById(`housing`).addEventListener(`change`, function (){\r\n        addRight();\r\n    });\r\n    document.getElementById(`utilities`).addEventListener(`change`, function (){\r\n        addRight();\r\n    });\r\n    document.getElementById(`transportation`).addEventListener(`change`, function (){\r\n        addRight();\r\n    });\r\n    document.getElementById(`food`).addEventListener(`change`, function (){\r\n        addRight();\r\n    });\r\n    document.getElementById(`clothing`).addEventListener(`change`, function (){\r\n        addRight();\r\n    });\r\n    document.getElementById(`media`).addEventListener(`change`, function (){\r\n        addRight();\r\n    });\r\n    document.getElementById(`entertainment`).addEventListener(`change`, function (){\r\n        addRight();\r\n    });\r\n    document.getElementById(`savings`).addEventListener(`change`, function (){\r\n        addRight();\r\n    });\r\n\r\n});\r\n\r\n\r\ndocument.getElementById(`loans`).addEventListener(`change`, function (){\r\n  changeData();\r\n});\r\ndocument.getElementById(`housing`).addEventListener(`change`, function (){\r\n  changeData();\r\n});\r\ndocument.getElementById(`utilities`).addEventListener(`change`, function (){\r\n  changeData();\r\n});\r\ndocument.getElementById(`transportation`).addEventListener(`change`, function (){\r\n  changeData();\r\n});\r\ndocument.getElementById(`food`).addEventListener(`change`, function (){\r\n  changeData();\r\n});\r\ndocument.getElementById(`clothing`).addEventListener(`change`, function (){\r\n  changeData();\r\n});\r\ndocument.getElementById(`media`).addEventListener(`change`, function (){\r\n  changeData();\r\n});\r\ndocument.getElementById(`entertainment`).addEventListener(`change`, function (){\r\n  changeData();\r\n});\r\ndocument.getElementById(`savings`).addEventListener(`change`, function (){\r\n  changeData();\r\n});"],"names":["utils","init","root","document","querySelector","occupations","getJSON","error","style","color","textContent","innerHTML","buildList","jobs","html","job","salary","occupation","updateMoney","money","fedTax","stTax","output","console","log","getElementById","Math","ceil","socSec","medicare","stDis","retInv","addRight","loans","parseFloat","value","housing","util","transport","food","clothes","media","entertain","savings","get","url","Promise","resolve","reject","request","XMLHttpRequest","open","onload","status","response","Error","onerror","send","string","JSON","parse","addEventListener","eventData","target","classList","remove","add","window","alert","changeData"],"version":3,"file":"index.325d742d.js.map"}